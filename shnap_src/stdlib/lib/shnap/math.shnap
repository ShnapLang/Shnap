fib_infinite_internal = @ seedOne=0,seedTwo=1 {
    setType(this, "iterator")

    currentVal = seedOne
    nextVal = seedTwo

    hasNext = $ return: true

    next = $ {
        ret = currentVal
        currentVal = nextVal
        nextVal = nextVal + ret
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1 {
            for this
                func(it)
            return: this
        }
        return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: import("shnap.collections.mapping").mappingIterator(this, func)
        else
            return: void
    }

}

fib_internal = @ count,seedOne=0,seedTwo=1 {
    setType(this, "iterator")

    currentVal = seedOne
    nextVal = seedTwo
    counter = 0

    hasNext = $ {
        return: counter < count
    }

    next = $ {
        counter += 1
        ret = currentVal
        currentVal = nextVal
        nextVal = nextVal + ret
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1 {
            for this
                func(it)
            return: this
        }
        return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: import("shnap.collections.mapping").mappingIterator(this, func)
        else
            return: void
    }

}

fib_like_internal = @ count,seeds=[0,1] {
    setType(this, "iterator")

    cache = seeds
    counter = 0

    hasNext = $ {
        return: counter < count
    }

    next = $ {
        temp = cache[0]
        counter += 1
        cache.append(sum(cache))
        cache.remove(0)
        return: temp
    }

    forEach = $ func,order=1 {
        if order == 1 {
            for this
                func(it)
            return: this
        }
        return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: import("shnap.collections.mapping").mappingIterator(this, func)
        else
            return: void
    }

}

fib_like_infinite_internal = @ seeds=[0,1] {
    setType(this, "iterator")

    cache = seeds

    cache.append(sum(cache))

    hasNext = $ return: true

    next = $ {
        temp = cache[0]
        counter += 1
        cache.append(sum(cache))
        cache.remove(0)
        return: temp
    }

    forEach = $ func,order=1 {
        if order == 1 {
            for this
                func(it)
            return: this
        }
        return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: import("shnap.collections.mapping").mappingIterator(this, func)
        else
            return: void
    }

}

private fib_infinite_internal
private fib_internal
private fib_like_internal
private fib_like_infinite_internal

fibLike = $ count=void,seeds=[0,1] {
    if count == void {
        return: fib_like_infinite_internal(seeds)
    } else {
        return: fib_like_internal(count, seeds)
    }
}

fib = $ count=void,seedOne=0,seedTwo=1 {
    if count == void {
        return: fib_infinite_internal(seedOne, seedTwo)
    } else {
        return: fib_internal(count, seedOne, seedTwo)
    }
}

primeFactors = $ x {
    tests = sievePrimes(x**0.5 + 2)
    res = import("shnap.collections.array_list").arrayList()
    for tests
        if (x % it == 0) res.append(it)
    if (res.len() == 0) res.append(x)
    return: res
}

prime = $ x {
    if (x < 2) return: false
    if(x == 2 || x == 3) return: true
    if(x % 2 == 0 || x % 3 == 0) return: false
    rt = x**0.5
    i = 6
    while (i <= rt) {
        if ((x % (i - 1) == 0) || (x % (i + 1) == 0)) return: false
        i += 6
    }

    return: true
}

sievePrimes = $ limit {
    bools = newArray(limit-1)
    primes = import("shnap.collections.array_list").arrayList()

    for range(bools.len()) bools[it] = true

    for range(2, limit) {
        if bools[it-2] {
            j = it*2
            while (j <= limit) {
                bools[j-2] = false
                j += it
            }
        }
    }

    for range(bools.len())
        if (bools[it]) primes.append(it+2)

    return: primes
}
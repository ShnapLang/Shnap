arrayList = import("shnap.collections.array_list").arrayList

lazyList = @ iter {
    setType(this, "list")

    cache = arrayList()

    genTo = $ n {
        while cache.len() <= n {
            if iter.hasNext()
                cache.append(iter.next())
            else
                throw: indexError(n)
        }
    }

    genAll = $ {
        for iter
            cache.append(it)
    }

    append = $ val {
        genAll()
        cache.append(val)
    }

    appendAll = $ elements {
        for elements
            append(it)
    }

    getSlice = $ begin,end {
        genTo(end)
        return: import("shnap.collections.slice").slice(this,begin,end)
    }

    setSlice = $ val,begin,end {
        genTo(end)
        cache[begin:end] = val
    }

    get = $ n {
        genTo(n)
        return: cache[n]
    }

    set = $ val,n {
        genTo(n)
        cache[n] = val
    }

    remove = $ n {
        genTo(n)
        cache.remove(n)
    }

    insert = $ n,val {
        genTo(n)
        cache.insert(n,val)
    }

    len = $ {
        genAll()
        return: cache.len()
    }

    contains = $ val {
        for this
            if it == val
                return: true
        return: false
    }

    forEach = $ func,order=1 {
        if order == 1 {
            for this
                func(it)
            return: this
        }
        return: void
    }

    map = $ func,order=1 {
        if order == 1 {
            res = list(newArray(len()))
            for range(len()) {
                res[it] = func(this[it])
            }
            return: res
        }
        return: void
    }
    
    iterator = @ {
        setType(this, "iterator")

        index = 0

        hasNext = $ return: index < cache.len() || iter.hasNext()

        next = $ {
            val = get(index)
            index += 1
            return: val
        }

        forEach = $ func,order=1 {
            if order == 1 {
                for this
                    func(it)
                return: this
            }
            return: void
        }

        map = $ func,order=1 {
            if order == 1
                return: import("shnap.collections.mapping").mappingIterator(this, func)
            else
                return: void
        }

    }
    
    asString = $ {
        return: import("shnap.collections.util").deepToString(this)
    }

}
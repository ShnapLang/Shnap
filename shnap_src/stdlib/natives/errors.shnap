error = @(name,message,cause=null,parents=null){

    if parents == null {
        parents = ["shnap.Error"]
    } else {
        parents.append("shnap.Error")
    }

    asString = ${
        return: name + ": " + message + if (cause != null) {", caused by:\n" + cause} else {"\n"}
    }

    is = $ (type) {
        if type == name {
            return: true
        }

        if type.parents != void {
            other = type.parents
            if other.iterator != void || (other.hasNext != void && other.next != void) {
                for otherType : other {
                    if parents.contains(otherType) {
                        return: true
                    }
                }
                return: false
            }
        }

        return: parents.contains(type)
    }

    isError = true

}

errorCls = $ (name,parents=null) return: $ (message,cause=null) return: error(name,message,cause,parents)
noimport errorCls

ioError = errorCls("shnap.IOError")
fileNotFoundError = errorCls("shnap.FileNotFoundError", ["shnap.IOError"])
typeError = errorCls("shnap.TypeError")
returnTypeError = errorCls("shnap.ReturnTypeError", ["shnap.TypeError"])
accessError = errorCls("shnap.AcessError")
interruptedError = errorCls("shnap.InterruptedError")
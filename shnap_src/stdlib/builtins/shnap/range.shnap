mapping_iterator_internal = @(iterator,function) {

    hasNext = $ return: iterator.hasNext()

    next = $ return: function(iterator.next())

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: this
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

noimport mapping_iterator_internal

range_internal_exclusive_up = @(min,max,step=1) {
    state = min

    hasNext = ${
        return: state < max
    }

    next = ${
        ret = state
        state += step
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: null
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

range_internal_inclusive_up = @(min,max,step=1){
    state = min

    hasNext = $ {
        return: state <= max
    }

    next = $ {
        ret = state
        state += step
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: null
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

private range_internal_exclusive_up
private range_internal_inclusive_up

range_internal_exclusive_down = @(max,min,step=1) {
    step = -step
    state = max

    hasNext = $ {
        return: state > min
    }

    next = $ {
        ret = state
        state += step
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: null
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

range_internal_inclusive_down = @(max,min,step=1) {
    step = -step
    state = max

    hasNext = $ {
        return: state >= min
    }

    next = $ {
        ret = state
        state += step
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: null
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

private range_internal_exclusive_down
private range_internal_inclusive_down

infrange = @(start,step=1) {

    state = start

    hasNext = $ return: true

    next = $ {
        ret = state
        state += step
        return: ret
    }

    forEach = $ func,order=1 {
        if order == 1
            for this
                func(it)
            return: null
        else
            return: void
    }

    map = $ func,order=1 {
        if order == 1
            return: mapping_iterator_internal(this, func)
        else
            return: void
    }

}

range = $(x,y=void,step=1,inclusive=false) {
    if y == void {
        ^a = 0
        ^b = x
    } else {
        ^a = x
        ^b = y
    }

    if (inclusive) {
        if a < b {
            return: range_internal_inclusive_up(a,b,step)
         } else {
            return: range_internal_inclusive_down(a,b,step)
         }
    } else {
        if a < b {
            return: range_internal_exclusive_up(a,b,step)
         } else {
            return: range_internal_exclusive_down(a,b,step)
        }
    }
}
abs = $ obj {return: if(obj < 0) -obj else obj}

gcd = $ a,b {
    while b != 0 {
        t = b
        b = a % b
        a = t
    }
    return: a
}

floor = $ x {
    xn = int(x)
    if x == xn || x > 0
        return: xn
    else
        return: xn - 1
}

ceil = $ x {
    flr = floor(x)
    if x == flr
        return: x
    else
        return: flr + 1
}

factors = $ x {
    res = import("shnap.collections.array_list").arrayList()
    for range(x,inclusive=true)
        if (x % it == 0) res.append(it)
    return: res
}

sum = $ val,vals...=void {
    if vals == void {
        res = 0
        for val
            res += num(it)
        return: res
    } else {
        res = 0
        res += num(val)
        for vals
            res += num(it)
        return: res
    }
}

min_max_identity = #{}
private min_max_identity

max = $ val,vals...=void {
    res = min_max_identity
    if vals == void {
        for val
            if res === min_max_identity || it > res
                res = it
    } else {
        res = val
        for vals
            if it > res
                res = it
    }
    return: res
}

min = $ val,vals...=void {
    res = min_max_identity
    if vals == void {
        for val
            if res === min_max_identity || it < res
                res = it
    } else {
        res = val
        for vals
            if it < res
                res = it
    }
    return: res
}

complex = @(real=0.0,imaginary=0.0) {
    setType(this, "complex")

    real = dec(real)
    imaginary = dec(imaginary)

    add = $ clx,order=1 {
        return: complex(real + clx.real, imaginary + clx.imaginary)
    }

    subtract = $ clx,order=1 {
        if order == 1
            return: complex(real - clx.real, imaginary - clx.imaginary)
        else
            return: complex(clx.real - real, imaginary - clx.imaginary)
    }

    multiply = $ clx,order=1 {
        return: complex(real * clx.real - imaginary * clx.imaginary, clx.real * imaginary + clx.imaginary * real)
    }

    divide = $ clx,order=1 {
        if order == 1 {
            denom = clx.real**2 + clx.imaginary**2
            if denom == 0
                return: void
            return: complex((real * clx.real + imaginary * clx.imaginary) / denom, (clx.real * imaginary - real * clx.imaginary) / denom)
        } else {
            denom = real**2 + imaginary**2
            if denom == 0
                return: void
            return: complex((real * clx.real + imaginary * clx.imaginary) / denom, (real * clx.imaginary - clx.real * imaginary) / denom)
        }
    }

    equals = $ clx,order=1 {
        return: type(clx) == "complex" && real == clx.real && imaginary == clx.imaginary
    }

    compareTo = $ clx,order=1 {
        if order == 1
            return: absoluteValueSquared() <> clx.absoluteValueSquared()
        else
            return: clx.absoluteValueSquared() <> absoluteValueSquared()
    }

    absoluteValueSquared = $ {
        return: real**2 + imaginary**2
    }

    absoluteValue = $ {
        return: absoluteValueSquared()**0.5
    }

    asString = $ {
        return: str(real) + " + " + str(imaginary) + "i"
    }

    round = $ n {
        return: complex(real.round(n), imaginary.round(n))
    }

}

rational = @(numerator=0,denominator=1,reduce=true) {
    setType(this, "rational")

    numerator = int(numerator)
    denominator = int(denominator)

    if reduce {
        common = gcd(numerator,denominator)
        numerator = numerator / common
        denominator = denominator / common
    }

    add = $ rat,order=1 {
        common = denominator * rat.denominator
        num = numerator * rat.denominator + rat.numerator * denominator
        return: rational(num, common)
    }

    subtract = $ rat,order=1 {
        common = denominator * rat.denominator
        if order == 1
            ^num = numerator * rat.denominator - rat.numerator * denominator
        else
            ^num = rat.numerator * denominator - numerator * rat.denominator

        return: rational(num, common)
    }

    multiply = $ rat,order=1 {
        return: rational(numerator * rat.numerator, denominator * rat.denominator)
    }

    divide = $ rat,order=1 {
        if order == 1
            return: this * rat.inverse()
        else
            return: rat * this.inverse()
    }

    equals = $ rat,order=1 {
        return: type(rat) == "rational" && denominator == rat.denominator && numerator == rat.numerator
    }

    compareTo = $ rat,order=1 {
        if order == 1
            return: numerator * rat.denominator <> rat.numerator * denominator
        else
            return: rat.numerator * denominator <> numerator * rat.denominator
    }

    inverse = $ {
        return: rational(denominator, numerator, false)
    }

    asString = $ {
        return: str(numerator) + if (denominator != 1) "/" + denominator else ""
    }

    asNum = $ {
        return: dec(numerator) / dec(denominator)
    }

}
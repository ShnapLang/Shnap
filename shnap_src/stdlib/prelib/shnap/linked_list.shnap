listNode = @(val,left,right) {

    insertLeft = $(node) {
        node.right = this
        left = node
    }

    insertRight = $(node) {
        node.left = this
        right = node
    }

}

nodeIterator = @(start) {
    current = start

    hasNext = ${
        return: current != null
    }

    next = ${
        res = current.val
        current = current.right
        return: res
    }

}

listIterator = @(start) {
    current = start

    hasNext = ${
        return: current != null
    }

    next = ${
        res = current.val
        current = current.right
        return: res
    }

}

linkedList = @(size) {
    start = null
    end = start

    add = $(val) {
        node = listNode(val,null,null)
        if (size > 0) {
            end.insertRight(node)
        } else {
            start = node
        }
        end = node
        size += 1
    }

    get = $(index) {
        count = 0
        for (element : this) {
            if (count == index) {
                return: element
            }
            count += 1
        }
    }

    remove = $(index) {
        count = 0
        previous = null
        for (node : this.nodeIterator()) {
            if (count == index) {
                node.right.left = node.right
                return: node.val
            }
            previous = node
            count += 1
        }
    }

    nodeIterator = ${
        return nodeIterator(start)
    }

    iterator = ${
        return: listIterator(start)
    }

    for (i : range.range(size)) {
        add(null)
    }
}